worker_processes auto;

error_log                     /var/log/nginx/error.log warn;
pid                           /var/run/nginx.pid;
worker_rlimit_nofile 65532;
include                       /etc/nginx/modules-enabled/*.conf;
events {
    worker_connections 8192;
}
http {
    sendfile                  on;
    #tcp_nopush                on;
    #types_hash_max_size       2048;
    #keepalive_timeout         65;

    include                   /etc/nginx/mime.types;
    default_type              application/octet-stream;

    log_format  main          '[$time_local] $remote_addr "$request" '
                              '$status $body_bytes_sent "$arg_bypassCache" '
                              '"$http_referer" "$http_x_forwarded_for" "$http_user_agent"';
    access_log                /var/log/nginx/access.log main;
    #access_log                off;

    gzip                      on;
    gzip_disable              "msie6";
    #gzip_vary                on;
    #gzip_proxied             any;
    #gzip_types               *;

    include /etc/nginx/conf.d/proxy.conf;


    #lua_shared_dict prometheus_metrics 10M;
    #lua_package_path "/opt/nginx-lua-prometheus/master/?.lua;;";
    #init_worker_by_lua_block {
    #    prometheus = require("prometheus").init("prometheus_metrics")
    #    metric_requests = prometheus:counter("nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
    #    metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
    #    metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})
    #}
    #log_by_lua_block {
    #    metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
    #    metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    #}
}